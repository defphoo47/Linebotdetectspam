from flask import Flask, request, abort
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, FlexSendMessage
from linebot import LineBotApi, WebhookHandler
from pythainlp.tokenize import word_tokenize
from tensorflow.keras.preprocessing.sequence import pad_sequences
import joblib

#model = keras.models.load_model('thai_spam_naive_bayes_model.pkl')

model = joblib.load('thai_spam_naive_bayes_model.pkl')
tokenizer = joblib.load('tokenizer.pkl')

app = Flask(__name__)

# ‡πÉ‡∏™‡πà Channel Access Token ‡πÅ‡∏•‡∏∞ Channel Secret ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å LINE Developers Console
line_bot_api = LineBotApi('3bNl87afW/9Tvtm6Qul5kCWNadqXzCTBxrEUA2pb21oHT8rS8c8qviCTaTq9USfTCieDE9AWDx6uHin/D0cp1nzLE3MUTsXghmem9EIVKdAuBUpushZu8ivx8JjQip9bJSp3OyB+kT2/B2TJpCqgagdB04t89/1O/w1cDnyilFU=')
handler = WebhookHandler('2b350201322be0a84b137e8f990971f2')

def predict_spam(text):
    # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô sequence
    text_tokenized = ' '.join(word_tokenize(text, engine='newmm'))
    text_seq = tokenizer.texts_to_sequences([text_tokenized])

    # ‡πÅ‡∏õ‡∏•‡∏á sequence ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
    max_len = 100  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß sequence ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
    text_pad = pad_sequences(text_seq, maxlen=max_len)

    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•
    prediction = model.predict(text_pad)

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á binary (0 ‡∏´‡∏£‡∏∑‡∏≠ 1)
    predicted_label = (prediction > 0.5).astype(int)
    return "‡∏™‡πÅ‡∏õ‡∏°" if predicted_label == 1 else "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡πÅ‡∏õ‡∏°"


@app.route("/callback", methods=['POST'])
def callback():
    # ‡∏£‡∏±‡∏ö X-Line-Signature ‡∏à‡∏≤‡∏Å Header
    signature = request.headers['X-Line-Signature']

    # ‡∏£‡∏±‡∏ö request body
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)

    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    
    user_message = event.message.text
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏™‡πÅ‡∏õ‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    prediction = predict_spam(user_message)
    
    if user_message.lower() == "start":  
        liff_url = "https://liff.line.me/2006400968-Egavp321"  # ‡πÉ‡∏™‡πà LIFF ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô URL ‡∏ô‡∏µ‡πâ
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î LIFF
        flex_message = FlexSendMessage(
            alt_text='‡∏ö‡∏≠‡∏ó‡∏Å‡∏≤‡∏Å‡πÄ‡∏≠‡∏á‡∏à‡∏±‡πä‡∏ü~',
            contents={
                "type": "bubble",
                "hero": {
                    "type": "image",
                    "url": "https://cdn.discordapp.com/attachments/1289990276269473816/1289991201327415416/bot.png?ex=66fad56d&is=66f983ed&hm=800703b9aa397b06b02020d169c596cd935cb87103d18c29b76e33fe5a289517&",  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                    "size": "full",
                    "aspectRatio": "20:13",
                    "aspectMode": "cover"
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": "‡∏ö‡∏≠‡∏ó‡∏Å‡∏≤‡∏Å‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡∏±‡πä‡∏ü~",
                            "weight": "bold",
                            "size": "xl",
                            "margin": "md",
                            "color": "#000000"
                        },
                        {
                            "type": "text",
                            "text": "BotKAK",
                            "size": "md",
                            "color": "#666666"
                        },
                        {
                            "type": "separator"
                        },
                        {
                            "type": "text",
                            "text": "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å\n‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡∏≠‡∏ó‡∏Å‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏¢‡∏à‡∏±‡πä‡∏ü ‚ù§Ô∏è\n‡∏ö‡∏≠‡∏ó‡∏Å‡∏≤‡∏Å‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏≠‡∏á üò≠",
                            "wrap": True,
                            "margin": "md",
                            "color": "#000000"
                        },
                        {
                            "type": "box",
                            "layout": "vertical",
                            "margin": "md",
                            "spacing": "sm",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": "‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÅ‡∏õ‡∏°‡πÑ‡∏´‡∏°",
                                    "wrap": True
                                },
                                {
                                    "type": "text",
                                    "text": "‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πá‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏¥‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏´‡∏•‡∏∞",
                                    "wrap": True
                                },
                                {
                                    "type": "text",
                                    "text": "‚Ä¢ ‡πÅ‡∏ï‡πà‡∏ö‡∏≠‡∏ó‡∏Å‡∏≤‡∏Å‡∏™‡∏°‡∏ä‡∏∑‡πà‡∏≠",
                                    "wrap": True
                                },
                            ]
                        }
                    ]
                },
                "footer": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "button",
                            "style": "primary",
                            "action": {
                                "type": "uri",
                                "label": "‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏ß‡πá‡∏ö BotKAK",
                                "uri": liff_url  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                            },
                            "color": "#FFBB33"
                        }
                    ]
                }
            }
        )

        # ‡∏™‡πà‡∏á Flex Message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î LIFF
        line_bot_api.reply_message(
            event.reply_token,flex_message
        )
    else : 
        if prediction == "‡∏™‡πÅ‡∏õ‡∏°":
            reply_text = f"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÅ‡∏õ‡∏°: ''{user_message}'' "
        else:
            #reply_text = "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÅ‡∏õ‡∏°"
            pass
            # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply_text)
    )

if __name__ == '__main__':
    app.run(debug=True)
